one grid cell can ocuppy multiple itemsv

grid-gap:

  - grid-row-gap

  - grid-column-gap

fractional unit: fr

repeat(<number>, <unit in>)

grid cell positioning eg:

  {
    grid-row: 1/2
    grid-column 3/4

      ** numbers denote grid lines

      ** shorthand

          grid-area: <row start line >/ <column start line> / <row end line> / <column end line>

          eg grid-area: 1/3/2/4
  }


spanning methods :

  method 1 : use grid-row or grid-row 

  method 2 : 

    grid-column/row : 1/ span 3

      ** 3 is the number of cell and not grid line

    grid-column/row : 2 / -1 

      ** spans the element from grid line 2 to the last grid line


grid line naming: in professional environment... there is a practice of naming the lines inside a square [] instead of using line numbers.... for eg

  - grid-template-rows: [header-start] 1fr [header-end main-start] 2fr [main-end]

  - grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end]

grid area naming: naming each cell using grid-template-areas attribute

   - grid-template-areas: "head head head head"
                          "box box box side"
                          "main main main main"
                          "foot foot foot foot"

    - .header {
      grid-area: head
    }

    - .sidebar {
      grid-area: side
    }

    - .main {
      grid-area: main
    }

    - footer {
      grid-area: foot
    }

- explicit grid vs implicit grid:

    - explicit grid: grid that we've actually defined

    - implicit grid: grid that is automatically added when new items are added to the grid container

      ** by default rows are added when new items are added.... if you want column to be added instead of rows... do

        - grid-auto-flow: column

      - styling implicit grid

          - grid-auto-rows: to give width of implicit grid rows

          - grid-auto-columns (only if grid-auto-flow is set to column):


aligning grid items:


  .grid-container {
    align-items: center (default stretch) (vertical axis) 
    justify-items: center (default stretch) (horizontal axis)

    ** align each item inside their respective grids
  }

  .grid-item {
    align-items: center (default stretch)
    justify-items: center (default stretch)
  }

aligning grid tracks: when the container is bigger

  .grid-container {
    justify-content: center/start/end/space between/ space evenly

    align-content: center/start/end/space between/ space evenly
  }

max content: key word that enables the grid cell to have the same width as that of the content of the cell... eg

  .container {
    grid-template-columns: max-content 1fr 1fr 1fr

    grid-template-row: max-content 1fr 1fr 1fr
  }

min-content : usage same as that of max-content but if the content is a sentence, the sentence gets re aligned such that there is one word per line and expands vertically 

minmax function: to hard code minimum and maximum width of a cell.... eg

  .container{
    grid-template-columns: minmax(200px, 300px) repeat(3, 1fr)
  }


auto-fit and auto-fill to eliminate media queries:

  - auto-fill: enables to create cells automatically with the specified width with respect to vp width change.... eg

    .container {
      grid-template-columns: repeat(auto-fill, 200px)
    }

  - auto-fit: functions same as auto fill, but only fills the cell if there is a content to fill inside the cell

    ** to eliminate media queries we have to use a combination of minmac and autofit like this....

      .container {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr))
      }















  





 

