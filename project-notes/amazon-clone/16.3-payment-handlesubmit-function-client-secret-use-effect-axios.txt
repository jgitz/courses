

- goto payment.js...
    - make handle submit an asynch function
    - inside handle submit
        - add preventDefault to prevent default behavior of onsubmit
        - set state of processing to true... i.e when we click buy now button.... the button must be disabled during payment processing

- in payment.js... before main return....make a new state variable named "client secret" to store client secret code given by stripe.... set it's initial value to true

- to interact with stripe to get secret code.... install axios inside the project
    - npm i axios
    - in src folder.... make a new folder named axios
    - inside axios folder.... make a new file named axios.js
    - inside axios.js.... import axios from axios
    - now assign a variable named "instance" to set the base URL of the link path.... to which we POST the price amount from the basket 
        - ****** leave it an empty string as we'll only set our backend url's later after we set firebase cloud function


- in payment.js.... before the main return.... make a useEffect hook ?? with basket state inside its INPUT ARRAY....everytime the basket changes... we've to pass in the cart amount to backend and get back the response from the backend with the SECRET KEY..... inside use effect 
    - make an async function named getClientSectet

        - inside this function....inside a variable named RESPONSE.... write an await axios POST method to our backend URL (that is yet to be created in backend).... this url will hold a query parameter (?) after which we pass in the amount from the GET BASKET TOTAL selector from the reducer..

        - ***** this url is to be set up in our backend and the reply response from this url should have the client secret.... basically the client from front end pass in the amount to this url and the backend should reply back with client key.... JERALD should set the backend in such way

        - if the backend respond successfully.... the reply will have CLIENT SECRET KEY inside..... <RESPONSE></RESPONSE>.DATA.clientSecret
            - now set the state variable named clientSecret with the secret code from <response></response>.data.clientSecret




***** inside the function of a component.... declare the state variables first.... only after that declare the useEffect hooks.... else state variables declared in useEffect hook won't work

***** while writing url using axios.... always use the VARIABLE name i.e here INSTANCE.... insetad of axios.... else it won't get routed to the base url

***** always call the function that we have created here getClientSecret()

