- What is a JWT (JSON WEB TOKEN) TOKEN?

   - JWT is STRUCTURED DATA FORMAT used to SECURELY TRANSMIT DATA between TWO PARTIES as JSON OBJECT... 

   - A JWT is generated by JWT PACKAGE/LIBRARY   

   - STRUCTURE of JWT:

      - a generated JWT TOKEN looks like GIBBERISH... this GIBBERISH has 3 parts of the form xxxx.yyyy.zzz SEPARATED BY DOT(.) on CAREFUL OBSERVATION 

        eg: 

          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ
          .SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

      ** the 3 parts of the JWT represents 

          1) HEADER OBJECT: is an object which contains metadata of about the JWT token such as ALGORITHM USED to generate SIGNATURE (later) PART of the token.... it is of the form 

              {
                "alg": "HS256",
                "typ": "JWT"
              }

                ** algorithm used is HS256 (default)... other algorithms can be RS256, ES256 etc.... HS256 uses SHARED SECRET KEY, where secret key is shared b/w sender and receiver... other algorithms use PUBLIC-PRIVATE KEY concept 


                ** typ property defines that this is jwt... other values are jwe, jws (out of scope)

                **** this header OBJECT is CONVERTED to BASE64 URL ENCODING.... hence it looks like GIBBERISH..

                  ** BASE64 encoded message can be decoded by anyone

          2) PAYLOAD PART: JWT is used to send ANY DATA.... and PAYLOAD represents this data... 

            ** commonly payload data is send as object with INBUILT PROPERTIES and USER DEFINED PROPERTIES like this 

              {
                "iss": "https://example.com",
                "sub": "1234567890",
                "aud": "https://api.example.com",
                "exp": 1678939200,
                "iat": 1678935600,
                "nbf": 1678935600,
                "jti": "abc123xyz"

              }

                ** COMMONLY USED PAYLOAD PROPERTIES
                  - iss (issuer): represents the URL which generated the JWT 

                  - sub (subject): represents the USER/USERID to which the generated token belongs to 

                  - aud (audience): represents the receiving client URL to whom the token is send 

                  - exp (expiration time): the time after which the token become invalid 

                    ** time in form of UNIX TIMESTAMP 
                    
                  - iat (issued at) : the time at which the token is generated 

                    ** time in form of UNIX TIMESTAMP 

                  - nbf (not before) : before this time the token WON'T GET ACTIVATED 

                    ** time in form of UNIX TIMESTAMP 

                  - jti (jwt id) : is a unique identifier (id) given to the token for additional protection

            **** payload object is also ENCODED as BASE64 URL.... BASE64 ENCODED CODE can easily be DECODED BY ANYONE.... so DON'T include CREDENTIAL INFORMATIONS such as PASSWORDS/email in PAYLOAD OBJECT

          3) SIGNATURE PART: this is the part that is generated using HASHING ALGORITH to generated a HASH SIGNATURE....

              ** the signature is generated by combining 
                - HEADER PART

                - PAYLOAD PART

                - SECRET KEY :

                  - provided at the SENDER PART while using JWT.sign() method (later) 
                
                  - secret should be a strong key which SHOULD BE MADE BY THE DEVELOPER AT THE SERVER SIDE

                  - SECRET KEY should be STORED in MEMORY of the SERVER (i.e in ENVIRONMENTAL VARIABLE)

                  ** METHOD TO CREATE A STRONG SECRET KEY in NODE SERVER and STORE IT IN ENVIRONMENT VARIABLE 

                    - open cli 

                    - type

                      :: node :: 

                      - press enter 

                      ** node cli opens 

                    - type 

                      :: require('crypto').randomBytes(64).toString('hex') ::

                      ** outputs a string of codes 

                      ** copy the string of codes EXCEPT THE '' 

                    - create a .env file in project folder 

                    - inside .env file.... paste the secret key as CONSTANTS like this 

                        <TOKEN_SECRET_KEY> = <paste the code>

                    - **** in gitignore file... ALWAYS IGNORE .env files 

                    - to use the .env file variables in relevant project files 


                      - install package named 'dotenv'

                        :: npm i dotenv ::

                      - for the process.env.<ENVIRONMENTAL VARIABLES> code to work in the project file.... use the line at the top

                        require('dotenv').config()

                        **** without dotenv package and this line.... no environmental variable will be fetched from .env file





                    
                  