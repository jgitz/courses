In an ideal work environment.. merging is not easy.... because many developers work on same project file on same branch.... this leads to MERGE CONFLICTS....

for eg, consider this scenario..... you enter a file through a feature branch.... then add a code to a SPECIFIC LINE NUMBER of the file..... then we move to master branch..... then add another line of code to THE SAME LINE NUMBER of the same file..... after doing this.... when you try to change your branch from master to feature branch..... git won't allow.... since 2 branches are acting on a same line of code.... either we have to COMMIT change from the latest branch (here in this scenario it's master).... or STASH (out of scope) the code (temporarily store the change without commit).....  ( in this scenario, commiting only saves the line of the branch from which commit was made)

.... now when our coding is over we have to MERGE our FEATURE BRANCH to MASTER BRANCH....
     ***** usually we do merging in git hub.... but local merging is not intended to merge your feature branch to master branch..... instead, when you are in a project with many developers.... the make changes to master branch in github repo.... so you also need to get those changes in your local repo.... so you have to PULL the master branch changes from GITHUB.... and MERGE it with the local branch on which you are working....

so we SWITCH to FEATURE BRANCH.... then use merge command to maseter using the command........ :: git merge master :: .... now a MERGE CONFLICT MESSAGE APPEARS.... as we have 2 changes made from 2 branches on the same line.....

.... this merge conflict can be rectified using VS CODE.... it colorize our changes..... and has option which change to keep and which to discard or keep the both changes....

.... make one more add and commit from your feature branch....

