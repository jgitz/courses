.... the disadvantage of xml ajax call is that 

    1) it need an event listener and a CALL BACK function to get the response asynchronously.... 

    2) problem of CALLBACK HELL if we want to NEST MANY related xml ajax calls

    ** to rectify this FETCH API was created in ES6 2015 version and PROMISE is used to ASYNCHRONOUSLY handle api call responses 

- PROMISE: is a placeholder OBJECT which is made to store the value generated by an ASYNCHRONOUS operation

- PROMISE LIFE CYCLE: promise has THREE STATES 

    1) pending state: time when a request is send from client to the server 

    2) fulfilled state: if the server accepts request and send the response value 

    3) rejected state: if the server rejects the request and sends the error value as response 

    ** settled promise: is when a promise is EITHER in FULFILLED or REJECTED state 

- FETCH API: is a new way to send HTTP CRUD REQUESTS in ES6

        ** SYNTAX for a get http request: 

                fetch("<endpoint url>")

                ** response will be a PROMISE from a server

        ** this has replaced ajax calls 

        ** fetch calls always gives a PROMISE as response

        ** .json() method: is a FETCH METHOD used to convert the incoming JSON strings into OBJECTS..... previously we used JSON.parse(<json string>) for that....

            - .json also RETURNS a PROMISE.... hence it's result can only be viewed on using ANOTHTER .then after it.



- ADVANTAGE of FETCH API over AJAX CALLS:

        1) no need of a separate eventListener (load) and its callback to get response data for an http request 

        2) there is no CALLBACK hell as we can CHAIN multiple fetch requests using .THEN

        ** A RETURN value in the preceeding .THEN is MANDATORY for chaining multiple then

        ** DON'T use a .then INSIDE a another .then.... it'll make callback hell


